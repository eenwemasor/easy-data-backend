"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    data_transaction(id: ID @eq): DataTransaction @find
    cable_transaction(id: ID @eq): CableTransaction@find
    airtime_transaction(id: ID @eq): AirtimeTransaction @find
    electricity_transaction(id: ID @eq): ElectricityTransaction @find

    userUniqueID(unique_id: ID @eq): User @find
    getAdminChannelUtil(id: ID @eq): AdminChannelUtil @find
    me: User @middleware(checks:["auth:api"]) @auth
    getCableSubscription(cable: String! @where(operator: "=")): [CableSubscription!]! @all
    getDataPriceListing(network: String! @where(operator: "=")): [DataPriceListing!]! @all

}
type Mutation {
    createUser(
        email: String @rules(apply: ["required"])
        full_name: String @rules(apply: ["required"])
        phone: String @rules(apply: ["required"])
        wallet: String @rules(apply: ["required"])
        password: String @bcrypt(apply: ["required"])
        accessibility:String @rules(apply: ["required"])
        email_confirmed:Boolean @rules(apply: ["required"])
        phone_verified:Boolean @rules(apply: ["required"])
        unique_id:String @rules(apply: ["required"])
        active:Boolean @rules(apply: ["required"])
        bonus_wallet:Float @rules(apply: ["required"])
    ): User @create(model: "App\\User")

    createDataTransaction(
        reference: String @rules(apply: ["required"])
        network: String @rules(apply: ["required"])
        data: String @rules(apply: ["required"])
        initial_balance: Float
        price: Float @rules(apply: ["required"])
        beneficiary: String @rules(apply: ["required"])
        new_balance:Float
        status:String @rules(apply: ["required"])
        method:String @rules(apply: ["required"])
        user_id:String
    ): DataTransaction @create(model: "App\\DataTransaction")

    createCableTransaction(
        reference: String @rules(apply: ["required"])
        service: String @rules(apply: ["required"])
        decoder_number: String @rules(apply: ["required"])
        initial_balance: Float
        price: Float @rules(apply: ["required"])
        new_balance:Float
        status:String @rules(apply: ["required"])
        method:String @rules(apply: ["required"])
        user_id:String
    ): CableTransaction @create(model: "App\\CableTransaction")

    createAirtimeTransaction(
        reference: String @rules(apply: ["required"])
        phone: String @rules(apply: ["required"])
        value: String @rules(apply: ["required"])
        initial_balance: Float
        price: Float @rules(apply: ["required"])
        new_balance:Float
        status:String @rules(apply: ["required"])
        method:String @rules(apply: ["required"])
        user_id:String
    ): AirtimeTransaction @create(model: "App\\AirtimeTransaction")

    createElectricityTransaction(
        reference: String @rules(apply: ["required"])
        service: String @rules(apply: ["required"])
        decoder_number: String @rules(apply: ["required"])
        initial_balance: Float
        price: Float @rules(apply: ["required"])
        new_balance:Float
        status:String @rules(apply: ["required"])
        method:String @rules(apply: ["required"])
        user_id:String
    ): ElectricityTransaction @create(model: "App\\ElectricityTransaction")

    createQuickBuy(
        reference: String @rules(apply: ["required"])
        transaction_type: String
        network: String
        plan: String
        amount: Float @rules(apply: ["required"])
        beneficiary:String
        email:String @rules(apply: ["required"])
        status:String
    ): QuickBuy @create(model: "App\\QuickBuy")


    updateUser(
        id:ID!
        email: String
        full_name: String
        phone: String
        wallet: String
        password: String
        accessibility:String
        email_confirmed:Boolean
        phone_verified:Boolean
        unique_id:String
    ): User @update(model: "App\\User")

    updateDataTransaction(
        id:ID!
        reference: String
        network: String
        data: String
        price: Float
        beneficiary: String
        status:String
        method:String

    ): DataTransaction @update(model: "App\\DataTransaction")

    updateCableTransaction(
        id:ID!
        reference: String
        service: String
        decoder_number: String
        initial_balance: Float
        price: Float
        new_balance:Float
        status:String
        method:String
    ): CableTransaction @update(model: "App\\CableTransaction")

    updateAirtimeTransaction(
        id:ID!
        reference: String
        phone: String
        value: String
        initial_balance: Float
        price: Float
        new_balance:Float
        status:String
        method:String
    ): AirtimeTransaction @update(model: "App\\AirtimeTransaction")

    updateElectricityTransaction(
        id:ID!
        reference: String
        service: String
        decoder_number: String
        initial_balance: Float
        price: Float
        new_balance:Float
        status:String
        method:String
    ): ElectricityTransaction @update(model: "App\\ElectricityTransaction")

    deleteUser(
        id:ID!
    ): User @delete(model: "App\\User")

    deleteDataTransaction(
        id:ID!
    ): DataTransaction @delete(model: "App\\DataTransaction")

    deleteCableTransaction(
        id:ID!
    ): CableTransaction @delete(model: "App\\CableTransaction")

    deleteAirtimeTransaction(
        id:ID!
    ): AirtimeTransaction @delete(model: "App\\AirtimeTransaction")

    deleteElectricityTransaction(
        id:ID!
    ): ElectricityTransaction @delete(model: "App\\ElectricityTransaction")

}

type CableSubscription {
    id: ID!
    cable: String!
    plan: String!
    price: String!
}

type DataPriceListing {
    id: ID!
    network: String!
    plan: String!
    price: String!
}

type AirtimeTransaction {
    id: ID!
    reference:String!
    phone:String!
    value:String!
    initial_balance:Float
    price:Float!
    new_balance:Float
    status:String!
    method:String!
    user_id:String
}

type CableTransaction {
    id: ID!
    reference:String!
    service:String!
    decoder_number:String!
    initial_balance:Float!
    price:Float!
    new_balance:Float!
    status:String!
    method:String!
    user_id:String
}

type DataTransaction {
    id: ID!
    reference:String!
    network:String!
    data:String!
    initial_balance:Float
    price:Float!
    beneficiary:String!
    new_balance:Float
    status:String!
    method:String!
    user_id:String
}

type ElectricityTransaction {
    id: ID!
    reference:String!
    service:String!
    decoder_number:String!
    initial_balance:Float
    price:Float!
    new_balance:Float
    status:String!
    method:String!
    user_id:String
}

type QuickBuy {
    id: ID!
    reference:String!
    transaction_type:String!
    network:String
    plan:String
    amount:Float!
    beneficiary:String
    email:String!
    status:String
}
type AdminChannelUtil {
    id: ID!
    phone:String!
    email:String!
}